{"version":3,"sources":["Filter.js","PersonForm.js","Persons.js","service.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","setFilter","value","onChange","e","target","PersonForm","newName","setNewName","newNumber","setNewNumber","saveContact","persons","type","onClick","preventDefault","id","name","number","Persons","deletePerson","toLocaleLowerCase","includes","map","key","baseUrl","Notification","message","messageStyle","style","messagePositive","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","messageNegative","App","useState","setPersons","setMessage","useEffect","a","axios","get","then","response","data","contact","fetchPersons","samePerson","length","window","confirm","console","log","put","update","newContact","person","catch","error","post","save","prevState","setTimeout","personId","delete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.827009f2.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Filter = ({ filter, setFilter }) =>\n    <div>\n        filter shown with <input value={filter} onChange={(e) => setFilter(e.target.value)} />\n    </div>\n\n","import React from 'react'\nexport const PersonForm = ({ newName, setNewName, newNumber, setNewNumber, persons, saveContact }) =>\n    <form>\n        <div>\n            name: <input value={newName} onChange={(e) => setNewName(e.target.value)} />\n        </div>\n        <div>\n            number: <input value={newNumber} onChange={(e) => setNewNumber(e.target.value)} />\n        </div>\n        <div>\n            <button type=\"submit\" onClick={(e) => {\n                e.preventDefault()\n                saveContact({\n                    id: newNumber + newName,\n                    name: newName,\n                    number: newNumber\n                })\n                setNewName(\"\");\n                setNewNumber(\"\");\n            }}>add</button>\n        </div>\n    </form>\n","import React from 'react'\nexport const Persons = ({ persons, filter, deletePerson }) => <div>\n    {\n        persons && persons.filter(({ name }) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n            .map(({ id, name, number }) => <div key={number}>{name}: {number} <button onClick={() => deletePerson(id)}>delete</button></div>)\n    }\n</div>","import axios from 'axios';\nconst baseUrl = \"/api/persons\"\n\nexport const get = () =>\n    axios\n        .get(baseUrl)\n        .then(response => response.data)\n\n\nexport const save = (contact) =>\n    axios\n        .post(baseUrl, contact)\n        .then(response => response.data)\n\nexport const remove = (id) => axios.delete(`${baseUrl}/${id}`)\n\nexport const update = (contact) => {\n    console.log(\"contact\", contact)\n    return axios.put(`${baseUrl}/${contact.id}`, contact)\n        .then((response) => response.data);\n};","import React from 'react';\n\nexport const Notification = ({ message, messageStyle }) => message && <div style={messageStyle}>{message}</div>;\n","import React, { useState, useEffect } from 'react'\nimport { Filter } from './Filter'\nimport { PersonForm } from './PersonForm'\nimport { Persons } from './Persons'\nimport { get, save, remove, update } from \"./service\"\nimport { Notification } from \"./Notification\"\n\nconst messagePositive = {\n  color: 'green',\n  background: 'lightgrey',\n  fontSize: 20,\n  borderStyle: 'solid',\n  borderRadius: 5,\n  padding: 10,\n  marginBottom: 10,\n};\n\nconst messageNegative = {\n  color: 'red',\n  background: 'lightgrey',\n  fontSize: 20,\n  borderStyle: 'solid',\n  borderRadius: 5,\n  padding: 10,\n  marginBottom: 10,\n};\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState({ message: \"\", style: messagePositive })\n\n  useEffect(() => {\n    const fetchPersons = async () => {\n      const contact = await get();\n      setPersons(contact)\n    };\n    fetchPersons();\n  }, [])\n\n  const saveContact = (contact) => {\n    const samePerson = persons.filter(({ name }) => contact.name === name);\n    if (samePerson.length > 0) {\n      if (window.confirm(\"Do you really want to replace the contact?\")) {\n        update({\n          id: samePerson[0].id,\n          name: samePerson[0].name,\n          number: contact.number\n        })\n          .then((newContact) => {\n            setPersons(persons.map((person) => person.name === newContact.name ? newContact : person))\n            setMessage({\n              message: `success update ${newContact.name}`,\n              style: messagePositive\n            })\n          })\n          .catch((error) => {\n            setMessage({\n              message: `error: ${error.message}`,\n              style: messageNegative\n            })\n          })\n      }\n    } else {\n      save(contact)\n        .then((contact) => {\n          setPersons((prevState) => [...prevState, contact])\n          setMessage({\n            message: `success save ${contact.name}`,\n            style: messagePositive\n          })\n        })\n        .catch((error) => {\n          setMessage({\n            message: `error: ${error.message}`,\n            style: messageNegative\n          })\n        })\n    }\n    setTimeout(() => {\n      setMessage({\n        message: \"\",\n        style: messagePositive\n      })\n    }, 5000)\n  }\n\n  const deletePerson = (personId) => {\n    if (window.confirm(\"Do you really want to delete the contact?\")) {\n      remove(personId)\n        .then(() => {\n          setPersons(persons.filter(({ id }) => id !== personId))\n        })\n        .catch((error) => {\n          setMessage({\n            message: `error: ${error.message}`,\n            style: messageNegative\n          })\n        })\n    }\n\n    setTimeout(() => {\n      setMessage({\n        message: \"\",\n        style: messageNegative\n      })\n    }, 5000)\n\n  }\n\n  return (\n    <div>\n      <Notification message={message.message} messageStyle={message.style}></Notification>\n      <h2>PhoneBook</h2>\n      <Filter filter={filter} setFilter={setFilter}></Filter>\n      <h2>add a new</h2>\n      <PersonForm newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        persons={persons}\n        saveContact={saveContact}>\n      </PersonForm>\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} deletePerson={deletePerson}></Persons>\n    </div >\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}